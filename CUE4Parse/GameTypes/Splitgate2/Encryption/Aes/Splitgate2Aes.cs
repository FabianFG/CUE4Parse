using System;
using System.Runtime.Intrinsics;
using CUE4Parse.UE4.VirtualFileSystem;
using static System.Runtime.Intrinsics.X86.Aes;
using static System.Runtime.Intrinsics.Vector128;

namespace CUE4Parse.GameTypes.Splitgate2.Encryption.Aes;

/// <summary>
/// Reversed by Spiritovod
/// </summary>
public static class Splitgate2Aes
{
    // 0x854D65496D9996957B7A8BF2F36851EB03DDC9FD3A5AD212BE53A106305C6DCA
    private static readonly Vector128<byte>[] RoundKeys =
    [
        Create(0x85, 0x51, 0xC2, 0x5C, 0x9F, 0xF2, 0x5E, 0xF6, 0xAE, 0xC2, 0x2C, 0x67, 0x67, 0x67, 0xB5, 0x86),
        Create(0x76, 0x29, 0xAD, 0x43, 0x1B, 0x22, 0x6E, 0x07, 0xE4, 0xFF, 0x7B, 0xDA, 0x16, 0x82, 0x07, 0xD9),
        Create(0xAA, 0x21, 0x71, 0xAD, 0xC6, 0x62, 0x45, 0x6E, 0x97, 0xB5, 0x0B, 0xCB, 0xFE, 0x62, 0x86, 0x0E),
        Create(0x35, 0xCE, 0x5C, 0xDB, 0x6D, 0x0B, 0xC3, 0x44, 0xFF, 0xDD, 0x15, 0xDD, 0xF2, 0x7D, 0x7C, 0x03),
        Create(0x41, 0x43, 0xD7, 0x33, 0x6C, 0x43, 0x34, 0xC3, 0x51, 0xD7, 0x4E, 0xA5, 0x69, 0xD7, 0x8D, 0xC5),
        Create(0x25, 0x9F, 0x59, 0x4C, 0x58, 0xC5, 0x9F, 0x9F, 0x92, 0xD6, 0xD6, 0x99, 0x0D, 0xA0, 0x69, 0xDE),
        Create(0x6A, 0xC4, 0xF4, 0x07, 0x2D, 0x00, 0xE3, 0xF0, 0x3D, 0x94, 0x7A, 0x66, 0x38, 0x00, 0xC3, 0x60),
        Create(0x00, 0xD6, 0x85, 0xB4, 0x47, 0xC4, 0x17, 0xF7, 0x10, 0x94, 0x99, 0x96, 0x05, 0x94, 0xB9, 0x06),
        Create(0x98, 0x86, 0x2B, 0xDB, 0x1B, 0xFC, 0x68, 0xC3, 0xB7, 0x49, 0x8F, 0xD5, 0x55, 0x65, 0xF6, 0x41),
        Create(0x56, 0x50, 0x8F, 0x19, 0x47, 0x12, 0x92, 0x43, 0x57, 0x50, 0x8E, 0x61, 0x15, 0x00, 0x20, 0x90),
        Create(0x23, 0xC7, 0x50, 0xB6, 0x83, 0x7A, 0x43, 0x18, 0xAC, 0xB5, 0xE7, 0x16, 0xE2, 0x2C, 0x79, 0x94),
        Create(0x40, 0xFB, 0x42, 0x1A, 0x11, 0x42, 0x1D, 0x5A, 0x10, 0x42, 0x1C, 0x22, 0x42, 0x50, 0xAE, 0xF1),
        Create(0x5A, 0x8E, 0x5F, 0x61, 0xA0, 0xBD, 0x13, 0xAE, 0x2F, 0xCF, 0xA4, 0x0E, 0x4E, 0x99, 0x9E, 0x82),
        Create(0x85, 0x4D, 0x65, 0x49, 0x6D, 0x99, 0x96, 0x95, 0x7B, 0x7A, 0x8B, 0xF2, 0xF3, 0x68, 0x51, 0xEB),
    ];

    private static void DecryptWithRoundKeys(byte[] input, int index, Vector128<byte>[] roundkeys)
    {
        var state = Create(input, index);
        var rounds = roundkeys.Length - 1;
        state = Xor(state, roundkeys[0]);
        for (var i = 1; i < rounds; i++)
        {
            state = Decrypt(state, roundkeys[i]);
        }

        state = DecryptLast(state, roundkeys[rounds]);
        state.CopyTo(input, index);
    }

    public static byte[] Splitgate2Decrypt(byte[] bytes, int beginOffset, int count, bool isIndex, IAesVfsReader reader)
    {
        if (bytes.Length < beginOffset + count)
            throw new IndexOutOfRangeException("beginOffset + count is larger than the length of bytes");
        if (count % 16 != 0)
            throw new ArgumentException("count must be a multiple of 16");
        if (reader.AesKey == null)
            throw new NullReferenceException("reader.AesKey");

        var output = new byte[count];
        Array.Copy(bytes, beginOffset, output, 0, count);

        for (var i = 0; i < count / 16; i++)
        {
            DecryptWithRoundKeys(output, i * 16, RoundKeys);
        }

        return output;
    }
}
