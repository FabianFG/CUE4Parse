using System;
using System.Runtime.Intrinsics;
using CUE4Parse.UE4.VirtualFileSystem;
using static System.Runtime.Intrinsics.X86.Aes;
using static System.Runtime.Intrinsics.Vector128;

namespace CUE4Parse.GameTypes.Splitgate2.Encryption.Aes;

/// <summary>
/// Reversed by Spiritovod
/// </summary>
public static class Splitgate2Aes
{
    // 0x062AB4E9BB0D7DDDAE9DCB5A29FB666B4968186C56424624DBC96F06158496D9
    private static readonly Vector128<byte>[] RoundKeys =
    [
        Create(0xE6, 0xEA, 0xF7, 0x97, 0x6A, 0xC2, 0xD7, 0x18, 0x08, 0xC2, 0x12, 0x28, 0x8D, 0x2F, 0x51, 0xBE), // XMM4
        Create(0x8A, 0x3C, 0x40, 0xEA, 0x80, 0x54, 0x06, 0x18, 0x86, 0x9E, 0x78, 0x3D, 0xD7, 0x84, 0x84, 0x4B), // XMM2
        Create(0xFF, 0x12, 0xD6, 0x0E, 0x0A, 0xC1, 0xB0, 0x70, 0x4F, 0x12, 0xDD, 0x17, 0x42, 0x7F, 0xE5, 0x65), // XMM3
        Create(0xBE, 0xF0, 0x69, 0x73, 0x0A, 0x68, 0x46, 0xF2, 0x06, 0xCA, 0x7E, 0x25, 0x51, 0x1A, 0xFC, 0x76), // XMM15
        Create(0x94, 0x26, 0xEC, 0x60, 0xF5, 0xD3, 0x66, 0x7E, 0x45, 0xD3, 0x6D, 0x67, 0x0D, 0x6D, 0x38, 0x72), // XMM5
        Create(0x00, 0x86, 0x5E, 0x2D, 0xB4, 0x98, 0x2F, 0x81, 0x0C, 0xA2, 0x38, 0xD7, 0x57, 0xD0, 0x82, 0x53), // XMM14
        Create(0x57, 0x8C, 0x44, 0x33, 0x61, 0xF5, 0x8A, 0x1E, 0xB0, 0x00, 0x0B, 0x19, 0x48, 0xBE, 0x55, 0x15), // XMM13
        Create(0xD3, 0xE3, 0x37, 0xC2, 0x36, 0x79, 0xCE, 0x2D, 0xD1, 0xF5, 0x81, 0x07, 0xF8, 0xBE, 0x5E, 0x0C), // XMM12
        Create(0x9B, 0x25, 0xB3, 0xC2, 0x81, 0xF3, 0xEB, 0x93, 0x0C, 0x24, 0x66, 0xFA, 0xE3, 0x48, 0xAD, 0xD2), // XMM11
        Create(0x65, 0x49, 0xF7, 0x77, 0xE5, 0x9A, 0xF9, 0xEF, 0xE7, 0x8C, 0x4F, 0x2A, 0x29, 0x4B, 0xDF, 0x0B), // XMM10
        Create(0xCF, 0xF4, 0x71, 0xF9, 0x1A, 0xD6, 0x58, 0x51, 0x8D, 0xD7, 0x8D, 0x69, 0xEF, 0x6C, 0xCB, 0x28), // XMM9
        Create(0xDF, 0xF5, 0xBB, 0x42, 0x80, 0xD3, 0x0E, 0x98, 0x02, 0x16, 0xB6, 0xC5, 0xCE, 0xC7, 0x90, 0x21), // XMM8
        Create(0x9F, 0x53, 0x64, 0xFD, 0xD5, 0x22, 0x29, 0xA8, 0x97, 0x01, 0xD5, 0x38, 0x62, 0xBB, 0x46, 0x41), // XMM7
        Create(0x06, 0x2A, 0xB4, 0xE9, 0xBB, 0x0D, 0x7D, 0xDD, 0xAE, 0x9D, 0xCB, 0x5A, 0x29, 0xFB, 0x66, 0x6B) // XMM6
    ];

    private static void DecryptWithRoundKeys(byte[] input, int index, Vector128<byte>[] roundkeys)
    {
        var state = Create(input, index);
        var rounds = roundkeys.Length - 1;
        state = Xor(state, roundkeys[0]);
        for (var i = 1; i < rounds; i++)
        {
            state = Decrypt(state, roundkeys[i]);
        }

        state = DecryptLast(state, roundkeys[rounds]);
        state.CopyTo(input, index);
    }

    public static byte[] Splitgate2Decrypt(byte[] bytes, int beginOffset, int count, bool isIndex, IAesVfsReader reader)
    {
        if (bytes.Length < beginOffset + count)
            throw new IndexOutOfRangeException("beginOffset + count is larger than the length of bytes");
        if (count % 16 != 0)
            throw new ArgumentException("count must be a multiple of 16");
        if (reader.AesKey == null)
            throw new NullReferenceException("reader.AesKey");

        var output = new byte[count];
        Array.Copy(bytes, beginOffset, output, 0, count);

        for (var i = 0; i < count / 16; i++)
        {
            DecryptWithRoundKeys(output, i * 16, RoundKeys);
        }

        return output;
    }
}
