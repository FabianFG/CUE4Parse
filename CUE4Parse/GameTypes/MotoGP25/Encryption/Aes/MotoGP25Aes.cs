using System;
using System.Runtime.Intrinsics;
using CUE4Parse.UE4.VirtualFileSystem;
using static System.Runtime.Intrinsics.X86.Aes;
using static System.Runtime.Intrinsics.Vector128;

namespace CUE4Parse.GameTypes.MJS.Encryption.Aes;

/// <summary>
/// Reversed by Spiritovod
/// </summary>
public static class MotoGP25Aes
{
    // 0xDAA05A8D0A1E1948431E91FDB2004A775B209CEDF7FEF3C9B1E1EB4579099839
    private static readonly Vector128<byte>[] RoundKeys =
    [
        Create(0x9B, 0x6A, 0x9E, 0x07, 0x6E, 0xD2, 0x5B, 0xB0, 0x4D, 0x4C, 0xB2, 0xBF, 0x77, 0x97, 0x77, 0xD8),
        Create(0x49, 0xC1, 0xA1, 0x6C, 0x97, 0x3D, 0x6C, 0x68, 0x57, 0x47, 0xCA, 0x79, 0xB2, 0x60, 0x99, 0x08),
        Create(0xC2, 0x53, 0x6D, 0xA8, 0x73, 0xA2, 0x3D, 0xD3, 0xF2, 0xB7, 0x8E, 0x90, 0x5F, 0x4C, 0x26, 0x76),
        Create(0xE9, 0x7C, 0x13, 0xD9, 0xDE, 0xFC, 0xCD, 0x04, 0xC0, 0x7A, 0xA6, 0x11, 0xE5, 0x27, 0x53, 0x71),
        Create(0x0C, 0x8F, 0x09, 0x01, 0xB1, 0xF1, 0x50, 0x7B, 0x81, 0x15, 0xB3, 0x43, 0xAD, 0xFB, 0xA8, 0xE6),
        Create(0x62, 0x12, 0x3A, 0x9B, 0x37, 0x80, 0xDE, 0xDD, 0x1E, 0x86, 0x6B, 0x15, 0x25, 0x5D, 0xF5, 0x60),
        Create(0xAC, 0xC1, 0x83, 0x1D, 0xBD, 0x7E, 0x59, 0x7A, 0x30, 0xE4, 0xE3, 0x38, 0x2C, 0xEE, 0x1B, 0xA5),
        Create(0xDC, 0x87, 0xA9, 0x41, 0x55, 0x92, 0xE4, 0x46, 0x29, 0x06, 0xB5, 0xC8, 0x3B, 0xDB, 0x9E, 0x75),
        Create(0xB3, 0xDC, 0xF3, 0xC2, 0x11, 0xBF, 0xDA, 0x67, 0x8D, 0x9A, 0xBA, 0x42, 0x1C, 0x0A, 0xF8, 0x9D),
        Create(0x42, 0x8C, 0xDF, 0x17, 0x89, 0x15, 0x4D, 0x07, 0x7C, 0x94, 0x51, 0x8E, 0x12, 0xDD, 0x2B, 0xBD),
        Create(0xB1, 0x39, 0xF0, 0x7A, 0xA2, 0x63, 0x29, 0xA5, 0x9C, 0x25, 0x60, 0x25, 0x91, 0x90, 0x42, 0xDF),
        Create(0xFE, 0x91, 0x3E, 0xC4, 0xCB, 0x99, 0x92, 0x10, 0xF5, 0x81, 0x1C, 0x89, 0x6E, 0x49, 0x7A, 0x33),
        Create(0x56, 0xD2, 0xFE, 0x06, 0x13, 0x5A, 0xD9, 0xDF, 0x3E, 0x46, 0x49, 0x80, 0x0D, 0xB5, 0x22, 0xFA),
        Create(0xAA, 0x49, 0x6B, 0x25, 0x35, 0x08, 0xAC, 0xD4, 0x3E, 0x18, 0x8E, 0x99, 0x9B, 0xC8, 0x66, 0xBA),
        Create(0x5B, 0x20, 0x9C, 0xED, 0xF7, 0xFE, 0xF3, 0xC9, 0xB1, 0xE1, 0xEB, 0x45, 0x79, 0x09, 0x98, 0x39),
    ];

    private static void DecryptWithRoundKeys(byte[] input, int index, Vector128<byte>[] roundkeys)
    {
        var state = Create(input, index);
        var rounds = roundkeys.Length - 1;
        state = Xor(state, roundkeys[0]);
        for (var i = 1; i < rounds; i++)
        {
            state = Decrypt(state, roundkeys[i]);
        }

        state = DecryptLast(state, roundkeys[rounds]);
        state.CopyTo(input, index);
    }

    public static byte[] MotoGP25Decrypt(byte[] bytes, int beginOffset, int count, bool isIndex, IAesVfsReader reader)
    {
        if (bytes.Length < beginOffset + count)
            throw new IndexOutOfRangeException("beginOffset + count is larger than the length of bytes");
        if (count % 16 != 0)
            throw new ArgumentException("count must be a multiple of 16");
        if (reader.AesKey == null)
            throw new NullReferenceException("reader.AesKey");

        var output = new byte[count];
        Array.Copy(bytes, beginOffset, output, 0, count);

        for (var i = 0; i < count / 16; i++)
        {
            DecryptWithRoundKeys(output, i * 16, RoundKeys);
        }

        return output;
    }
}
